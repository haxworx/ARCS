.\" Automated Revision Control System man page
.TH man 1 "18 April 2009" "0.9.9.3" "ARCS man page"
.SH NAME
ARCS \ - Automated Revision Control System
.SH SYNOPSIS
.B arcs [OPTIONS]
.SH DESCRIPTION
.B arcs
is a wrapper for various revision control systems (specifically, git) allowing:
the creation and management of multiple repositories (locally and remote);
simplification of the syncronisation between repositories and peers;
almost-real-time file monitoring and updates (locally and remote); the
execution of makefiles upon execution on remote peers.  The current version
supports multiple revision control systems, though not simultaneously.  It
should be run from the working repository directory or optionally when
synchronising multiple repositories, the current working directory does not
matter. 
.P
.B arcs
aims to make the management of multiple and singular repositories simple.  It
makes the synchronisation of data easy and optionally in real-time.
.P 
.B NOTE:
For efficient usage the sharing of ssh public keys is recommended.  Otherwise the user
will be prompted for remote passwords upon each push (much like other RCSs).
.SH OPTIONS
.IP "-h -help --help"
this menu
.IP --version
version information
.IP -v
verbose mode (up to -v -v)
.IP -q
quiet mode (up to -q -q)
.IP -i
init new repository
.IP "--get fr [to]"
import host:dir [dir] - get a repository
.IP "--put fr to"
output dir host[:dir] - put a repository
.IP -l
run in a loop
.IP "-s <secs>"
sleep for secs between scans (2)
.IP "-S <scans>"
sleep for number of scans between push/pull (10)
.IP "-z <secs>"
small sleep between forking children (0.25)
.IP "-m <message>"
commit message
.IP "-t <message>"
set .arcs/task (persistent commit message)
.IP -n
take no action, only show what would have happened
.IP -N
no network, don't push out or pull in
.IP -O
don't push out
.IP -I
don't pull in
.IP --push
push even if it seems unnecessary
.IP -L
do not record local (can use to create an empty repository)
.IP -R
do not record remote (with pull, implies -O, conflicts --put)
.IP -M
don't run make
.IP -a
work on multiple projects listed in ~/.arcs_projects or args
.IP "-f [forks]"
fast parallel mode (messier output)
.IP -d
diff
.IP -p
patch
.IP -u
unpatch
.IP -E
commit ELF files and .o .a .so .exe .dll
.IP -T
(with -i) do not create link tree, for /etc
.IP -c
cooperative - make shared repositories / checkouts
.IP -C
not cooperative - make unshared repositories / checkouts
.IP --log
show changelog
.IP --hist
show change history
.IP --make
setup Makefile to work with arcs
.IP --peers
edit .arcs/peers
.IP --projects
edit ~/.arcs/projects
.IP --detach
clear .arcs/peers
.IP --forget
forget all history here and elsewhere *eek*
.IP --remove
remove .arcs and .git dirs from a module *eek*
.IP --rap
record changes after a pull (internal)

.SH EXAMPLES
.PP
1. Initialising a repository and creating it remotely.
The following will initialise the repository and create a matching repository on the remote host '192.168.0.4'.  In order 
to allow the remote peer to push back to the original repository the hostname or IP of the initial host must be added to the 
peer's .arcs/peers file.
.PP
.nf
$ mkdir ~/project
$ cd project
$ arcs
$ echo 192.168.0.4 >> .arcs/peers
$ arcs
.fi

.PP
2. Adding multiple projects to be maintained simultaneously.
To add multiple projects you must first create the repositories, like above, and add the full paths (one per line) to 
your ~/.arcs_projects file.  The program must then be invoked with the -a option, and -f if you want it to go fast.
.PP

.PP
3. Pulling a remote repository.
To pull a remote repository use the following command:
.PP
.nf
$ arcs --get username@hostname:/path/to/project
or
$ arcs --get http://git.hostname.com/project
.fi

.PP
.SH 4. Putting to and creating a remote repository.
.BR
.nf
$ arcs --put project_root username@host:[dir]
.fi
.PP

.SH ENVIRONMENT
.IP ARCS
set backend using this environmental variable by setting this variable to one of: GIT, SVN, CVS or DARCS.
Default usage is GIT if ARCS environmental variable is not set.
.IP "ARCS_SSH, SSH"
the command to use for ssh, e.g. SSH=fsh makes it go fast, especially with the -f option. $ARCS_SSH is used if it exists, else $SSH, else ssh.
Get fsh from:
.IP
http://sam.nipl.net/code/fsh/fsh.tgz

.SH FILES
.I $HOME/.arcs_projects
.I .arcs/peers

.SH BUGS
Only GIT backend has been tested. Furthermore, some backends cannot, yet, be used with arcs to create
repositories; they must be pulled remotely first.
.SH AUTHORS
.nf
Sam Watkins (swatkins@fastmail.fm)
Alastair Poole (alastairpoole@gmail.com)
.fi
.SH "SEE ALSO"
.BR git
.BR subversion
.BR darcs
.BR cvs
.BR ssh
.BR make
.BR fsh
